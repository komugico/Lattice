{"version":3,"sources":["serviceWorker.js","game/modules/game/actions.js","game/modules/game/reducer.js","game/constants/gameConstant.js","game/stores/gameStore.js","game/components/stoneDesignComponent.js","game/components/stonePanelComponent.js","game/components/userPanelComponent.js","game/components/boardDesignComponent.js","game/components/boardPanelComponent.js","game/containers/gameContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","RESET_STATE","PROGRESS_TURN","GRAB_STONE","PUT_STONE","UPDATE_SCORE","UPDATE_BOARD_SIZE","resetState","type","progressTurn","grabStone","data","payload","putStone","updateScore","updateBoardSize","initialBoard","lattice","JSON","parse","stringify","Array","fill","block","C","initialSmallStones","Math","floor","initialBigStones","initialState","board","stones","player1","small","big","player2","scores","boardSize","turn","next","grabbed","gameReducer","state","action","actions","x","y","newScore","createStore","StoneDesign","props","src","style","smallStoneSize","this","bigStoneSize","stone","height","position","zIndex","alt","Component","StonePanel","player","actionGrabStone","i","numSmall","push","numBig","smallStoneButtonVariant","isMyTurn","bigStoneButtonVariant","Row","Col","xl","lg","md","sm","xs","Button","variant","size","onClick","handleClickGrabSmallStone","disabled","smallStones","handleClickGrabBigStone","bigStones","UserPanel","Card","border","Header","playerName","Body","Title","score","BoardDesign","eventEnable","cellWidth","trs","y_idx","trSmallStone","left","top","tds","x_idx","tdSmallStone","width","textAlign","pointerEvents","id","idSmallStone","onMouseEnter","handleMouseEnterSmallStone","onMouseLeave","handleMouseLeaveSmallStone","handleClickStone","trBigStone","tdBigStone","idBigStone","handleMouseEnterBigStone","handleMouseLeaveBigStone","document","getElementById","className","actionPutStone","actionUpdateScore","paddingTop","tableSmallStone","tableBigStone","BoardPanel","addEventListener","handleUpdateBoardSize","clientWidth","actionUpdateBoardSize","GameContainer","Navbar","bg","Brand","href","Container","fluid","connect","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.acd19f89.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","/* ========================================================================== */\n/* Action Types                                                               */\n/* ========================================================================== */\nexport const RESET_STATE   = '@@game/resetState';\nexport const PROGRESS_TURN = '@@game/progressTurn';\nexport const GRAB_STONE    = '@@game/grabStone'\nexport const PUT_STONE     = '@@game/putStone';\nexport const UPDATE_SCORE = '@@game/updateScore';\nexport const UPDATE_BOARD_SIZE = \"@@game/updateBoardSize\";\n\n/* ========================================================================== */\n/* Actions                                                                    */\n/* ========================================================================== */\nexport const resetState      = ()     => ({ type: RESET_STATE                      });\nexport const progressTurn    = ()     => ({ type: PROGRESS_TURN                    });\nexport const grabStone       = (data) => ({ type: GRAB_STONE,        payload: data });\nexport const putStone        = (data) => ({ type: PUT_STONE,         payload: data });\nexport const updateScore     = (data) => ({ type: UPDATE_SCORE,      payload: data });\nexport const updateBoardSize = (data) => ({ type: UPDATE_BOARD_SIZE, payload: data });","/* ========================================================================== */\n/* Import                                                                     */\n/* ========================================================================== */\nimport * as actions from './actions';\nimport * as C from '../../constants/gameConstant';\n\n/* ========================================================================== */\n/* Constant Values                                                            */\n/* ========================================================================== */\n/* 諸々の初期値をNUM_LATTICEから計算 */\nconst initialBoard = {\n    lattice: JSON.parse(JSON.stringify(\n                (new Array(C.NUM_LATTICE)).fill((new Array(C.NUM_LATTICE)).fill(C.STONE_EMPTY)))\n             ),\n    block:   JSON.parse(JSON.stringify(\n                (new Array(C.NUM_LATTICE - 1)).fill((new Array(C.NUM_LATTICE - 1)).fill(C.STONE_EMPTY)))\n             ),\n};\nconst initialSmallStones = Math.floor(C.NUM_LATTICE * (C.NUM_LATTICE - 1) / 2);\nconst initialBigStones = Math.floor((C.NUM_LATTICE - 2) * (C.NUM_LATTICE - 2) / 2);\n\n/* 初期ステート */\nconst initialState = {\n    board: initialBoard,\n    stones: {\n        player1: {\n            small: initialSmallStones,\n            big: initialBigStones\n        },\n        player2: {\n            small: initialSmallStones,\n            big: initialBigStones\n        }\n    },\n    scores: {\n        player1: C.INIT_SCORE,\n        player2: C.INIT_SCORE\n    },\n    boardSize: C.INIT_BOARD_SIZE,\n    turn: C.INIT_TURN,\n    next: C.PLAYER_1,\n    grabbed: C.STONE_EMPTY\n};\n\n/* ========================================================================== */\n/* Reducer                                                                    */\n/* ========================================================================== */\nconst gameReducer = (state = initialState, action) => {\n    switch (action.type) {\n        /* ================================================================== */\n        case actions.RESET_STATE: /* 初期状態にリセットする ================= */\n            return initialState;\n        /* ================================================================== */\n        case actions.PROGRESS_TURN: /* ターンを進める ======================= */\n            if (state.next === C.PLAYER_1) {\n                /* プレイヤー１からプレイヤー２へ */\n                return { ...state, turn: state.turn + 1, next: C.PLAYER_2 };\n            }\n            else {\n                /* プレイヤー２からプレイヤー１へ */\n                return { ...state, turn: state.turn + 1, next: C.PLAYER_1 };\n            }\n        /* ================================================================== */\n        case actions.GRAB_STONE: /* 石を持つ ================================ */\n            return { ...state, grabbed: action.payload };\n        /* ================================================================== */\n        case actions.PUT_STONE: /* 石を置く ================================= */\n            let x = action.payload.x;\n            let y = action.payload.y;\n            let board = state.board;\n            let stones = state.stones;\n            if (state.grabbed & C.STONE_CHK_BIG) {\n                /* 大きい石の場合 */\n                if (board.block[y][x] === C.STONE_EMPTY) {\n                    /* 置き場所が空の場合は置く */\n                    board.block[y][x] = state.grabbed;\n                    if (state.next === C.PLAYER_1) {\n                        stones.player1.big = stones.player1.big - 1;\n                    }\n                    else {\n                        stones.player2.big = stones.player2.big - 1;\n                    }\n                }\n                else {\n                    /* 置き場所に石がある場合は置かない */\n                    return { ...state }\n                }\n            }\n            else {\n                /* 小さい石の場合 */\n                if (board.lattice[y][x] === C.STONE_EMPTY) {\n                    /* 置き場所が空の場合は置く */\n                    board.lattice[y][x] = state.grabbed;\n                    if (state.next === C.PLAYER_1) {\n                        stones.player1.small = stones.player1.small - 1;\n                    }\n                    else {\n                        stones.player2.small = stones.player2.small - 1;\n                    }\n                }\n                else {\n                    /* 置き場所に石がある場合は置かない */\n                    return { ...state }\n                }\n            }\n            /* ターンを進める */\n            return {\n                ...state,\n                board: board,\n                stones: stones,\n                grabbed: C.STONE_EMPTY,\n                turn: state.turn + 1,\n                next: state.next === C.PLAYER_1 ? C.PLAYER_2 : C.PLAYER_1\n            }\n        /* ================================================================== */\n        case actions.UPDATE_SCORE: /* スコア計算を行う ====================== */\n            let newScore = {\n                player1: state.next === C.PLAYER_1 ? state.scores.player1 : state.scores.player1 + 1,\n                player2: state.next === C.PLAYER_2 ? state.scores.player2 : state.scores.player2 + 1,\n            }\n            return {\n                ...state,\n                scores: newScore\n            };\n        /* ================================================================== */\n        case actions.UPDATE_BOARD_SIZE: /* ボードサイズの更新を行う ========= */\n            return { ...state, boardSize: action.payload };\n        /* ================================================================== */\n        default:\n            return state;\n        /* ================================================================== */\n    }\n};\n\nexport default gameReducer;","export const NUM_LATTICE = 5;\n\n/* ========================================================================== */\n/* 石                                                                         */\n/* ========================================================================== */\n// 石定義\nexport const STONE_EMPTY       = 0b000;\nexport const STONE_SMALL_WHITE = 0b100;\nexport const STONE_SMALL_BLACK = 0b101;\nexport const STONE_BIG_WHITE   = 0b110;\nexport const STONE_BIG_BLACK   = 0b111;\n// 識別用\nexport const STONE_CHK_EXIST   = 0b100;\nexport const STONE_CHK_BIG     = 0b010;\nexport const STONE_CHK_BLACK   = 0b001;\n/* ========================================================================== */\n\nexport const PLAYER_1 = 1;\nexport const PLAYER_2 = 2;\n\nexport const INIT_SCORE = 0;\nexport const INIT_TURN = 1;\nexport const INIT_BOARD_SIZE = 100;\n\nexport const WHITE_IMG_PATH = \"/Lattice/img/reversi_white.png\";\nexport const BLACK_IMG_PATH = \"/Lattice/img/reversi_black.png\";","import { createStore } from \"redux\";\nimport gameReducer from '../modules/game/reducer';\n\nexport default createStore(gameReducer);","import React, { Component } from 'react';\n\nimport * as C from '../constants/gameConstant';\n\nclass StoneDesign extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let smallStoneSize = Math.floor(this.props.boardSize / (C.NUM_LATTICE)) * 0.25;\n        let bigStoneSize = Math.floor(this.props.boardSize / (C.NUM_LATTICE)) * 0.5;\n\n        if (this.props.stone & C.STONE_CHK_EXIST) {\n            let src;\n            if (this.props.stone & C.STONE_CHK_BLACK) {\n                src = C.BLACK_IMG_PATH;\n            }\n            else {\n                src = C.WHITE_IMG_PATH;\n            }\n\n            let style;\n            if (this.props.stone & C.STONE_CHK_BIG) {\n                style = {\n                    height: bigStoneSize + 'px',\n                    position: 'relative',\n                    zIndex: 1\n                }\n            }\n            else {\n                style = {\n                    height: smallStoneSize + 'px',\n                    position: 'relative',\n                    zIndex: 1\n                }\n            }\n            return (\n                <img src={src} style={style} alt='' />\n            )\n        }\n        else {\n            return (\n                <div></div>\n            );\n        }\n    }\n}\n\nexport default StoneDesign;","import React, { Component } from 'react';\n\nimport { Row, Col, Button } from 'react-bootstrap';\n\nimport * as C from '../constants/gameConstant';\nimport StoneDesign from './stoneDesignComponent';\n\nclass StonePanel extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleClickGrabSmallStone() {\n        if (this.props.player === C.PLAYER_1) {\n            this.props.actionGrabStone(C.STONE_SMALL_WHITE);\n        }\n        else {\n            this.props.actionGrabStone(C.STONE_SMALL_BLACK);\n        }\n    }\n\n    handleClickGrabBigStone() {\n        if (this.props.player === C.PLAYER_1) {\n            this.props.actionGrabStone(C.STONE_BIG_WHITE);\n        }\n        else {\n            this.props.actionGrabStone(C.STONE_BIG_BLACK);\n        }\n    }\n\n    smallStones() {\n        let stones = new Array();\n        for (let i = 0; i < this.props.numSmall; i++) {\n            if (this.props.player === C.PLAYER_1) {\n                stones.push(\n                    <StoneDesign\n                        boardSize={this.props.boardSize}\n                        stone={C.STONE_SMALL_WHITE}\n                    />);\n            }\n            else {\n                stones.push(\n                    <StoneDesign\n                        boardSize={this.props.boardSize}\n                        stone={C.STONE_SMALL_BLACK}\n                    />);\n            }\n        }\n        return stones;\n    }\n\n    bigStones() {\n        let stones = new Array();\n        for (let i = 0; i < this.props.numBig; i++) {\n            if (this.props.player === C.PLAYER_1) {\n                stones.push(\n                    <StoneDesign\n                        boardSize={this.props.boardSize}\n                        stone={C.STONE_BIG_WHITE}\n                    />);\n            }\n            else {\n                stones.push(\n                    <StoneDesign\n                        boardSize={this.props.boardSize}\n                        stone={C.STONE_BIG_BLACK}\n                    />);\n            }\n        }\n        return stones;\n    }\n\n    render() {\n        let smallStoneButtonVariant = \"outline-primary\";\n        if (this.props.isMyTurn\n            && (this.props.grabbed & C.STONE_CHK_EXIST)\n            && !(this.props.grabbed & C.STONE_CHK_BIG)) {\n                smallStoneButtonVariant = \"primary\"\n        }\n        let bigStoneButtonVariant = \"outline-primary\";\n        if (this.props.isMyTurn\n            && (this.props.grabbed & C.STONE_CHK_EXIST)\n            && (this.props.grabbed & C.STONE_CHK_BIG)) {\n                bigStoneButtonVariant = \"primary\"\n        }\n\n        return (\n            <Row>\n                <Col xl={6} lg={6} md={6} sm={6} xs={6}>\n                    <Button\n                        variant={smallStoneButtonVariant}\n                        size=\"sm\"\n                        onClick={() => this.handleClickGrabSmallStone()}\n                        disabled={!this.props.isMyTurn || !this.props.numSmall}\n                        block\n                    >Grab<br />Small Stone</Button>\n                    <br />\n                    {this.smallStones()}\n                </Col>\n                <Col xl={6} lg={6} md={6} sm={6} xs={6}>\n                    <Button\n                        variant={bigStoneButtonVariant}\n                        size=\"sm\"\n                        onClick={() => this.handleClickGrabBigStone()}\n                        disabled={!this.props.isMyTurn || !this.props.numBig}\n                        block\n                    >Grab<br />Big Stone</Button>\n                    <br />\n                    {this.bigStones()}\n                </Col>\n            </Row>\n        );\n    }\n}\n\nexport default StonePanel;","import React, { Component } from 'react';\n\nimport { Card, Button } from 'react-bootstrap';\n\nimport StonePanel from './stonePanelComponent';\n\nclass UserPanel extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Card border={this.props.isMyTurn && \"success\"}>\n                <Card.Header>\n                    <b>{this.props.playerName}</b>\n                    <i>{this.props.isMyTurn && \" It's your turn.\"}</i>\n                </Card.Header>\n                <Card.Body>\n                    <Card.Title>Score</Card.Title>\n                    {this.props.score} Victory Points\n                    <hr />\n                    <Card.Title>Operations</Card.Title>\n                    <Button\n                        variant=\"outline-danger\"\n                        disabled={!this.props.isMyTurn}\n                    >Surrender</Button>\n                    <hr />\n                    <Card.Title>Stones</Card.Title>\n                    <StonePanel\n                        isMyTurn={this.props.isMyTurn}\n                        numSmall={this.props.stones.small}\n                        numBig={this.props.stones.big}\n                        boardSize={this.props.boardSize}\n                        player={this.props.player}\n                        actionGrabStone={this.props.actionGrabStone}\n                        grabbed={this.props.grabbed}\n                    />\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default UserPanel;","import React, { Component } from 'react';\n\nimport * as C from '../constants/gameConstant';\nimport StoneDesign from './stoneDesignComponent';\n\nclass BoardDesign extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    tableSmallStone(eventEnable, cellWidth) {\n        let trs = []\n        for (let y_idx = 0; y_idx < C.NUM_LATTICE; y_idx++) {\n            trs.push(this.trSmallStone(y_idx, eventEnable, cellWidth));\n        }\n        let style = {\n            position: 'absolute',\n            left: 0,\n            top: 0\n        }\n        return (\n            <table style={style}>\n                <tbody>\n                    {trs}\n                </tbody>\n            </table>\n        );\n    }\n\n    trSmallStone(y, eventEnable, cellWidth) {\n        let tds = []\n        for (let x_idx = 0; x_idx < C.NUM_LATTICE; x_idx++) {\n            tds.push(this.tdSmallStone(x_idx, y, eventEnable, cellWidth));\n        }\n        return (\n            <tr>\n                {tds}\n            </tr>\n        )\n    }\n\n    tdSmallStone(x, y, eventEnable, cellWidth) {\n        let style = {\n            width: cellWidth + 'px',\n            height: cellWidth + 'px',\n            border: 'none',\n            textAlign: 'center',\n            zIndex: 0,\n            pointerEvents: eventEnable ? 'auto' : 'none'\n        }\n        return (\n            <td\n                id={this.idSmallStone(x, y)}\n                onMouseEnter={() => this.handleMouseEnterSmallStone(x, y)}\n                onMouseLeave={() => this.handleMouseLeaveSmallStone(x, y)}\n                onClick={() => this.handleClickStone(x, y)}\n                style={style}\n            >\n                <StoneDesign\n                    boardSize={this.props.boardSize}\n                    stone={this.props.board.lattice[y][x]}\n                />\n            </td>\n        )\n    }\n\n    idSmallStone(x, y) {\n        let id = \"td-small-x\" + x + \"-y\" + y;\n        return id;\n    }\n\n    tableBigStone(eventEnable, cellWidth) {\n        let trs = []\n        for (let y_idx = 0; y_idx < (C.NUM_LATTICE - 1); y_idx++) {\n            trs.push(this.trBigStone(y_idx, eventEnable, cellWidth));\n        }\n        let style = {\n            position: 'absolute',\n            left: cellWidth / 2,\n            top: cellWidth / 2\n        }\n        return (\n            <table style={style}>\n                <tbody>\n                    {trs}\n                </tbody>\n            </table>\n        );\n    }\n\n    trBigStone(y, eventEnable, cellWidth) {\n        let tds = []\n        for (let x_idx = 0; x_idx < (C.NUM_LATTICE - 1); x_idx++) {\n            tds.push(this.tdBigStone(x_idx, y, eventEnable, cellWidth));\n        }\n        return (\n            <tr>\n                {tds}\n            </tr>\n        )\n    }\n\n    tdBigStone(x, y, eventEnable, cellWidth) {\n        let style = {\n            width: cellWidth + 'px',\n            height: cellWidth + 'px',\n            border: 'solid 1px',\n            textAlign: 'center',\n            zIndex: 0,\n            pointerEvents: eventEnable ? 'auto' : 'none'\n        }\n        return (\n            <td\n                id={this.idBigStone(x, y)}\n                onMouseEnter={() => this.handleMouseEnterBigStone(x, y)}\n                onMouseLeave={() => this.handleMouseLeaveBigStone(x, y)}\n                onClick={() => this.handleClickStone(x, y)}\n                style={style}\n            >\n            <StoneDesign\n                boardSize={this.props.boardSize}\n                stone={this.props.board.block[y][x]}\n            />\n            </td>\n        )\n    }\n\n    idBigStone(x, y) {\n        let id = \"td-big-x\" + x + \"-y\" + y;\n        return id;\n    }\n\n    handleMouseEnterSmallStone(x, y) {\n        let td = document.getElementById(this.idSmallStone(x, y));\n        td.className = 'stone-select';\n    }\n\n    handleMouseLeaveSmallStone(x, y) {\n        let td = document.getElementById(this.idSmallStone(x, y));\n        td.className = '';\n    }\n\n    handleMouseEnterBigStone(x, y) {\n        let td = document.getElementById(this.idBigStone(x, y));\n        td.className = 'stone-select';\n    }\n\n    handleMouseLeaveBigStone(x, y) {\n        let td = document.getElementById(this.idBigStone(x, y));\n        td.className = '';\n    }\n\n    handleClickStone(x, y) {\n        this.props.actionPutStone({ x: x, y: y });\n        this.props.actionUpdateScore();\n    }\n\n    render() {\n        let cellWidth = Math.floor(this.props.boardSize / (C.NUM_LATTICE));\n\n        if (this.props.grabbed & C.STONE_CHK_EXIST) {\n            if (this.props.grabbed & C.STONE_CHK_BIG) {\n                return (\n                    <div style={{position: 'relative', paddingTop: '100%'}}>\n                        {this.tableSmallStone(false, cellWidth)}\n                        {this.tableBigStone(true, cellWidth)}\n                    </div>\n                )\n            } else {\n                return (\n                    <div style={{position: 'relative', paddingTop: '100%'}}>\n                        {this.tableBigStone(false, cellWidth)}\n                        {this.tableSmallStone(true, cellWidth)}\n                    </div>\n                )\n            }\n        } else {\n            return (\n                <div style={{position: 'relative', paddingTop: '100%'}}>\n                    {this.tableBigStone(false, cellWidth)}\n                    {this.tableSmallStone(false, cellWidth)}\n                </div>\n            )\n        }\n    }\n}\n\nexport default BoardDesign;","import React, { Component } from 'react';\n\nimport { Row, Col, Card } from 'react-bootstrap';\n\nimport BoardDesign from './boardDesignComponent';\n\nclass BoardPanel extends Component {\n    constructor(props) {\n        super(props);\n\n        window.addEventListener('resize', () => this.handleUpdateBoardSize());\n    }\n\n    componentDidMount() {\n        this.handleUpdateBoardSize();\n    }\n\n    handleUpdateBoardSize() {\n        let boardSize = document.getElementById('board-parent').clientWidth * 0.9;\n        this.props.actionUpdateBoardSize(boardSize);\n    }\n\n    render() {\n        return (\n            <Card>\n                <Card.Header>\n                    <b>Game Board</b> | Turn {this.props.turn}\n                </Card.Header>\n                <Card.Body>\n                    <Row>\n                        <Col xl={2} lg={2} md={2} sm={2} xs={2}></Col>\n                        <Col id='board-parent' xl={8} lg={8} md={8} sm={8} xs={8}>\n                            <BoardDesign\n                                board={this.props.board}\n                                boardSize={this.props.boardSize}\n                                grabbed={this.props.grabbed}\n                                actionPutStone={this.props.actionPutStone}\n                                actionUpdateScore={this.props.actionUpdateScore}\n                            />\n                        </Col>\n                        <Col xl={2} lg={2} md={2} sm={2} xs={2}></Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default BoardPanel;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { Navbar } from 'react-bootstrap';\n\nimport * as actions from '../modules/game/actions';\nimport * as C from '../constants/gameConstant';\nimport UserPanel from '../components/userPanelComponent';\nimport BoardPanel from '../components/boardPanelComponent';\n\nclass GameContainer extends Component {\n    constructor(props) {\n        super(props);\n    }\n    \n    render() {\n        return (\n            <div>\n                <Navbar bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand href=\"/\">Lattice</Navbar.Brand>\n                </Navbar>\n                <br />\n                <Container fluid>\n                    <Row>\n                        <Col xl={2} lg={2} md={2} sm={2} xs={2}>\n                            <UserPanel\n                                playerName=\"Player 1\"\n                                player={C.PLAYER_1}\n                                boardSize={this.props.boardSize}\n                                score={this.props.scores.player1}\n                                stones={this.props.stones.player1}\n                                isMyTurn={this.props.next === C.PLAYER_1}\n                                grabbed={this.props.grabbed}\n                                actionGrabStone={this.props.grabStone}\n                            />\n                        </Col>\n                        <Col xl={8} lg={8} md={8} sm={8} xs={8}>\n                            <BoardPanel\n                                turn={this.props.turn}\n                                board={this.props.board}\n                                boardSize={this.props.boardSize}\n                                grabbed={this.props.grabbed}\n                                actionPutStone={this.props.putStone}\n                                actionUpdateBoardSize={this.props.updateBoardSize}\n                                actionUpdateScore={this.props.updateScore}\n                            />\n                        </Col>\n                        <Col xl={2} lg={2} md={2} sm={2} xs={2}>\n                            <UserPanel\n                                playerName=\"Player 2\"\n                                player={C.PLAYER_2}\n                                boardSize={this.props.boardSize}\n                                score={this.props.scores.player2}\n                                stones={this.props.stones.player2}\n                                isMyTurn={this.props.next === C.PLAYER_2}\n                                grabbed={this.props.grabbed}\n                                actionGrabStone={this.props.grabStone}\n                            />\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({ ...state });\n\nexport default connect(mapStateToProps, actions)(GameContainer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './game/stores/gameStore';\nimport GameContainer from './game/containers/gameContainer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GameContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}